- TestNG: (Test Next Generation)

- What is TestNG?
- TestNG is a UNIT TESTING FRAMEWORK.

- Is this tool created for testers?
- No. It is created for developers.

- Is this the only UNIT TESTING FRAMEWORK?
- No.
- JUnit
- NUnit

- How do we create structures or change behaviors of methods using TestNG?
- ANNOTATIONS

- Using annotations we can change the behaviors of the methods.

- Common annotations:
    - @Test
    - BeforeMethod, AfterMethod
    - BeforeClass, AfterClass
    - BeforeTest, AfterTest
    - BeforeSuite, AfterSuite

- @Test :
    - This annotation will convert a regular Java method into a runnable TestNG test.
    - Each test run by default in alphabetical order.
    - But we can change the running order using priority
    - Each test is independent from each other UNLESS we create dependency.

    @Test (priority = 1)
    public void test1(){
        //code

        //assertion

        //code (this code will not be ran if assertion fails)

        //assertion
    }

    @Test (priority = 2, dependsOnMethods="test1")
    public void test2(){

    }

- BeforeMethod:
    - This will run once before each test.
    - The number of tests we have will determine the number this method will be running.
    - If I have 10 @Test, this will run 10 times before each one of them.

- AfterMethod:
    - Same as BeforeMethod, but it will run after.
    - It will just run once after each @Test.


- BeforeClass:
    - This will run ONLY ONE TIME in each class, before everything else.
    - This does not care the number of @Test we have in the class.
    - Regardless it runs one time.

- AfterClass
    - Same as BeforeClass, but it will run after.
    - It will just run once after everything is done in the class.

- Ex: If we want to open a new browser before each test, and close the browser after each test, where do we put our setup and teardown lines?
    #1- BeforeMethod : WebDriver driver = WebDriverFactor.getDriver("chrome");
    #2- AfterMethod    : driver.close();

- Assertions:
    - What do assertions do?
    - Assertions are used to verify if actual = expected
    - String, int, List<WebElement>, List<String>
    - Assertions determine if a test passes or fails.

- Which assertions we have seen so far?

    - Assert.assertEquals() 
        - Accepts 2 arguments.
        - Both arguments have to be same type. 
        - It will compare and determine fail or pass.
        --> assertEquals(1,1)
        --> assertEquals("a","a")
        --> assertEquals(actual:driver.getTitle(),expected:"Google", "optional message")

    - Assert.assertTrue()
        - Accepts a boolean value.
        - If boolean returns true --> test passes
        - If boolean returns false --> test fails
        -->assertTrue(true);
        -->assertTrue(1==1);
        -->assertTrue(element.isDisplayed(),"optional message");

    - Assert.fail()
        - If you call this method in a @Test your test will fail regardless. 


 =========================================================================
 
  === Stale Element Reference Exception ===

There are 2 situations that we can get this exception: 
1- navigation (handle with reassingn(relocate) the element)
2- when element deleted from both html and page (handle with try catch)
This practice is about when navigation refresh happens sometime you can receive this exception and we should know how to handle it with relocating

relocating means; you will find element again;
cydeoLink = driver.findElement(By.xpath("//a[text()='CYDEO']"));